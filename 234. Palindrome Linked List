234. Palindrome Linked List



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public static ListNode head;
    public static ListNode tail;
    public static ListNode findmid(ListNode head){
        ListNode slow = head;
        ListNode fast = head;
        while(fast!=null && fast.next!=null){
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
    public boolean isPalindrome(ListNode head) {
        if(head==null || head.next==null){
            return true;
        }
        // step 1
        ListNode midnode = findmid(head);
        // step-2
        ListNode prev=null;
        ListNode curr = midnode;
        ListNode next;
        while(curr!=null){
            next=curr.next;
            curr.next= prev;
            prev=curr;
            curr=next;
        }
        ListNode left=head;
        ListNode right = prev;

        // step-3
        while(right!=null){
            if(left.val!=right.val){
                return false;
            }
            left = left.next;
            right = right.next;
        }
        return true;
    }
}
